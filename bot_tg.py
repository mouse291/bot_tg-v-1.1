import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook
from dotenv import load_dotenv
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è webhook
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # –ü—Ä–∏–º–µ—Ä: https://your-app-name.onrender.com
WEBHOOK_PATH = f"/webhook/{TELEGRAM_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 8000))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π
OPENROUTER_URL = "https://openrouter.ai/api/v1/chat/completions"
DEEPSEEK_URL = "https://api.deepseek.com/v1/chat/completions"

openrouter_headers = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "Content-Type": "application/json"
}
deepseek_headers = {
    "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
    "Content-Type": "application/json"
}


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏
async def ask_model(prompt, use_deepseek=False):
    headers = deepseek_headers if use_deepseek else openrouter_headers
    url = DEEPSEEK_URL if use_deepseek else OPENROUTER_URL
    model = "deepseek-chat" if use_deepseek else "openai/gpt-3.5-turbo"

    payload = {
        "model": model,
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7
    }

    try:
        r = requests.post(url, headers=headers, json=payload, timeout=20)
        r.raise_for_status()
        return r.json()["choices"][0]["message"]["content"]
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üí° OpenRouter", "üß† DeepSeek")
    await message.answer("–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", reply_markup=kb)


# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∂–∏–º–∞
user_modes = {}


@dp.message_handler(lambda m: m.text in ["üí° OpenRouter", "üß† DeepSeek"])
async def choose_mode(message: types.Message):
    use_ds = message.text.startswith("üß†")
    user_modes[message.from_user.id] = use_ds
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.")


# –†–µ–∂–∏–º –ª–æ–≥–æ–≤ –ø–æ –ø–∞—Ä–æ–ª—é
@dp.message_handler(lambda m: m.text.startswith("/logs"))
async def get_logs(message: types.Message):
    parts = message.text.split()
    if len(parts) == 2 and parts[1] == ADMIN_PASSWORD:
        await message.answer("–õ–æ–≥–æ–≤ –Ω–µ—Ç –∏–ª–∏ —Ä–µ–∂–∏–º –ª–æ–≥–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞).")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler()
async def main_handler(message: types.Message):
    use_ds = user_modes.get(message.from_user.id, False)
    await message.answer("üïê –î—É–º–∞—é...")
    reply = await ask_model(message.text, use_deepseek=use_ds)
    await message.answer(reply)


# Webhook-—Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞
async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info("üöÄ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def on_shutdown(dispatcher):
    await bot.delete_webhook()
    logging.info("üõë Webhook —É–¥–∞–ª—ë–Ω")


if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )

